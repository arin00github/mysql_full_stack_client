import Head from "next/head";
import React, { useEffect, useState } from "react";
import Axios from "axios";
import { useRouter } from "next/router";

import { Button, Form, FormCheck } from "react-bootstrap";
import { wrapper } from "../../redux/store";

import { useSelector } from "react-redux";
import { CommonService } from "../api/services/common-service";
import { IAuthInfo } from "../../src/interface/auth-interface";
import { IUserProfile } from "../../src/interface/user-interface";

export default function Page01({ props }) {
  //const getUser = useSelector(selectUser);
  //console.log("getUser", getUser.userArray);
  const resetValue = {
    name: "",
    email: "",
    active: "active",
    role: "user",
  };

  const bringToken = useSelector((state: { auth: IAuthInfo }) => state.auth);
  //console.log("bringToken", bringToken.token);

  const router = useRouter();
  const [form, setForm] = useState(resetValue);

  const [userList, setUserList] = useState<IUserProfile[]>([]);

  const handleChange = (e) => {
    setForm({
      ...form,
      [e.target.name]: e.target.value,
    });
  };

  const handleCheck = (e) => {
    setForm({
      ...form,
      [e.target.name]: e.target.value,
    });
  };

  const getActiveBoolean = (value) => {
    return value === "active" ? true : false;
  };

  // const addData = async (e) => {
  //   e.preventDefault();
  //   const { name, email, role, active } = form;

  //   const result = await Axios(`http://localhost:4200/api/users/add`, {
  //     //axios는 무조건 풀로 주소를 넣어야 한다.
  //     method: "POST",
  //     data: {
  //       name: name,
  //       email: email,
  //       role: role,
  //       active: getActiveBoolean(active),
  //     },
  //     headers: {
  //       "Content-Type": "application/json",
  //     },
  //   })
  //     .then((res) => {
  //       console.log(res.headers);
  //     })
  //     .catch((err) => {
  //       console.log(err);
  //       router.push({ pathname: "/404", query: { message: err } });
  //     });
  //   setForm(resetValue);
  // };

  const addUserOneAPI = async () => {
    const { name, email, role, active } = form;

    await CommonService.instance.addUserList(
      {
        name: name,
        email: email,
        role: role,
        active: getActiveBoolean(active),
      },
      bringToken.token
    );
  };

  const getUserListAPI = async () => {
    const rlst = await CommonService.instance.getUserList(bringToken.token);
    //console.log("getUserListAPI", rlst);
    setUserList(rlst);
  };

  const deleteUserOne = async () => {
    await CommonService.instance.deleteUserItem("");
  };

  const handleDelete = async (e: any, userid: string) => {
    e.preventDefault();
    await Axios(`http://localhost:4200/api/users/delete`, {
      //axios는 무조건 풀로 주소를 넣어야 한다.
      method: "DELETE",
      data: {
        user_id: userid,
      },
      headers: {
        "Content-Type": "application/json",
      },
    });
  };

  useEffect(() => {
    getUserListAPI();

    return () => {
      getUserListAPI();
    };
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container" id="add-data">
        <h2 className="text-center mt-5 ">ADD DATA</h2>
        <div className="d-flex">
          <div className="d-flex justify-content-center mt-3">
            <Form style={{ width: "420px" }} onSubmit={addUserOneAPI}>
              <Form.Group controlId="name">
                <Form.Label>name</Form.Label>
                <Form.Control
                  name="name"
                  value={form.name}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group controlId="email">
                <Form.Label>email</Form.Label>
                <Form.Control
                  name="email"
                  value={form.email}
                  onChange={handleChange}
                />
              </Form.Group>
              <Form.Group controlId="active">
                <Form.Label>active</Form.Label>
                <div className="d-flex">
                  <FormCheck
                    type="radio"
                    label="active"
                    value="active"
                    checked={form.active == "active"}
                    onChange={handleCheck}
                    name="active"
                  />
                  <FormCheck
                    type="radio"
                    label="inactive"
                    value="inactive"
                    checked={form.active == "inactive"}
                    onChange={handleCheck}
                    name="active"
                  />
                </div>
              </Form.Group>
              <Form.Group controlId="role">
                <Form.Label>role</Form.Label>
                <div className="d-flex">
                  <FormCheck
                    type="radio"
                    label="user"
                    value="user"
                    checked={form.role == "user"}
                    onChange={handleChange}
                    name="role"
                  />
                  <FormCheck
                    type="radio"
                    label="partner"
                    value="partner"
                    checked={form.role == "partner"}
                    onChange={handleChange}
                    name="role"
                  />
                  <FormCheck
                    type="radio"
                    label="manager"
                    value="manager"
                    checked={form.role == "manager"}
                    onChange={handleChange}
                    name="role"
                  />
                </div>
              </Form.Group>
              <input
                type="submit"
                value="register"
                className="btn btn-primary"
              />
            </Form>
          </div>
          <div style={{ marginLeft: "50px" }} className="w-100 mt-5">
            <h4>User List</h4>
            <table className="w-100 mt-4">
              <colgroup>
                <col width="30%" />
                <col width="30%" />
                <col width="40%" />
              </colgroup>
              <thead>
                <tr className="text-capitalize">
                  <th>name</th>
                  <th>role</th>
                  <th>active</th>
                </tr>
              </thead>
              <tbody>
                {userList.map((item) => {
                  return (
                    <tr>
                      <td>{item.name}</td>
                      <td>{item.role}</td>
                      <td>{item.active ? "active" : "inactive"}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

// export const getStaticProps = wrapper.getStaticProps(async (context) => {
//   const rslt = await Axios(`http://localhost:4200/api/data/read`, {
//     method: "GET",
//   });
//   context.store.dispatch(UserSuccess(rslt.data));
// });
